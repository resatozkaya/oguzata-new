import {
  CalendarIcon,
  DEFAULT_DESKTOP_MODE_MEDIA_QUERY,
  DateField,
  DatePickerToolbar,
  MobileDatePicker,
  PickersLayout,
  PickersPopper,
  datePickerToolbarClasses,
  extractValidationProps,
  renderDateViewCalendar,
  resolveDateFormat,
  singleItemValueManager,
  useDatePickerDefaultizedProps,
  useLocaleText,
  usePicker,
  useUtils,
  validateDate
} from "./chunk-OOBFS72J.js";
import "./chunk-RW3DMCEO.js";
import {
  LocalizationProvider
} from "./chunk-2BMZ2JCG.js";
import {
  InputAdornment_default,
  useMediaQuery
} from "./chunk-NUWLXC3H.js";
import {
  IconButton_default
} from "./chunk-IXYNVKST.js";
import "./chunk-T6LD4OHX.js";
import "./chunk-ZKKZG7R6.js";
import "./chunk-LRS6VPLY.js";
import {
  init_utils,
  resolveComponentProps,
  useSlotProps
} from "./chunk-RC4AOA57.js";
import "./chunk-QGJDLVOO.js";
import "./chunk-GAAQBJ6R.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose,
  init_useForkRef,
  init_useId,
  require_prop_types,
  useForkRef,
  useId,
  useThemeProps2 as useThemeProps
} from "./chunk-W42BWKI2.js";
import {
  _extends,
  init_extends
} from "./chunk-3FVQOJLY.js";
import "./chunk-TQBHQL4N.js";
import "./chunk-H6MPIRCS.js";
import {
  require_jsx_runtime
} from "./chunk-JBPKWQZS.js";
import {
  require_react
} from "./chunk-YE2AYMNL.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@mui/x-date-pickers/DatePicker/DatePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React3 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js
init_extends();
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_utils();

// node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/useDesktopPicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
init_utils();
init_useForkRef();
init_useId();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["props", "getOpenDialogAriaText"];
var _excluded2 = ["ownerState"];
var _excluded3 = ["ownerState"];
var useDesktopPicker = (_ref) => {
  var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$inputAdornment, _slots$openPickerButt, _slots$layout;
  let {
    props,
    getOpenDialogAriaText
  } = _ref, pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded);
  const {
    slots,
    slotProps: innerSlotProps,
    className,
    sx,
    format,
    formatDensity,
    timezone,
    label,
    inputRef,
    readOnly,
    disabled,
    autoFocus,
    localeText
  } = props;
  const utils = useUtils();
  const internalInputRef = React.useRef(null);
  const containerRef = React.useRef(null);
  const labelId = useId();
  const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null ? void 0 : (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
  const {
    open,
    actions,
    hasUIView,
    layoutProps,
    renderCurrentView,
    shouldRestoreFocus,
    fieldProps: pickerFieldProps
  } = usePicker(_extends({}, pickerParams, {
    props,
    inputRef: internalInputRef,
    autoFocusView: true,
    additionalViewProps: {},
    wrapperVariant: "desktop"
  }));
  const InputAdornment = (_slots$inputAdornment = slots.inputAdornment) != null ? _slots$inputAdornment : InputAdornment_default;
  const _useSlotProps = useSlotProps({
    elementType: InputAdornment,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.inputAdornment,
    additionalProps: {
      position: "end"
    },
    ownerState: props
  }), inputAdornmentProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2);
  const OpenPickerButton = (_slots$openPickerButt = slots.openPickerButton) != null ? _slots$openPickerButt : IconButton_default;
  const _useSlotProps2 = useSlotProps({
    elementType: OpenPickerButton,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.openPickerButton,
    additionalProps: {
      disabled: disabled || readOnly,
      onClick: actions.onOpen,
      "aria-label": getOpenDialogAriaText(pickerFieldProps.value, utils),
      edge: inputAdornmentProps.position
    },
    ownerState: props
  }), openPickerButtonProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded3);
  const OpenPickerIcon = slots.openPickerIcon;
  const Field = slots.field;
  const fieldProps = useSlotProps({
    elementType: Field,
    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
    additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
      id: labelId
    }, {
      readOnly,
      disabled,
      className,
      sx,
      format,
      formatDensity,
      timezone,
      label,
      autoFocus: autoFocus && !props.open,
      focused: open ? true : void 0
    }),
    ownerState: props
  });
  if (hasUIView) {
    fieldProps.InputProps = _extends({}, fieldProps.InputProps, {
      ref: containerRef,
      [`${inputAdornmentProps.position}Adornment`]: (0, import_jsx_runtime.jsx)(InputAdornment, _extends({}, inputAdornmentProps, {
        children: (0, import_jsx_runtime.jsx)(OpenPickerButton, _extends({}, openPickerButtonProps, {
          children: (0, import_jsx_runtime.jsx)(OpenPickerIcon, _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.openPickerIcon))
        }))
      }))
    });
  }
  const slotsForField = _extends({
    textField: slots.textField
  }, fieldProps.slots);
  const Layout = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
  const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
  let labelledById = labelId;
  if (isToolbarHidden) {
    if (label) {
      labelledById = `${labelId}-label`;
    } else {
      labelledById = void 0;
    }
  }
  const slotProps = _extends({}, innerSlotProps, {
    toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
      titleId: labelId
    }),
    popper: _extends({
      "aria-labelledby": labelledById
    }, innerSlotProps == null ? void 0 : innerSlotProps.popper)
  });
  const renderPicker = () => (0, import_jsx_runtime2.jsxs)(LocalizationProvider, {
    localeText,
    children: [(0, import_jsx_runtime.jsx)(Field, _extends({}, fieldProps, {
      slots: slotsForField,
      slotProps,
      inputRef: handleInputRef
    })), (0, import_jsx_runtime.jsx)(PickersPopper, _extends({
      role: "dialog",
      placement: "bottom-start",
      anchorEl: containerRef.current
    }, actions, {
      open,
      slots,
      slotProps,
      shouldRestoreFocus,
      children: (0, import_jsx_runtime.jsx)(Layout, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
        slots,
        slotProps,
        children: renderCurrentView()
      }))
    }))]
  });
  return {
    renderPicker
  };
};

// node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js
var DesktopDatePicker = React2.forwardRef(function DesktopDatePicker2(inProps, ref) {
  var _defaultizedProps$yea, _defaultizedProps$slo2;
  const localeText = useLocaleText();
  const utils = useUtils();
  const defaultizedProps = useDatePickerDefaultizedProps(inProps, "MuiDesktopDatePicker");
  const viewRenderers = _extends({
    day: renderDateViewCalendar,
    month: renderDateViewCalendar,
    year: renderDateViewCalendar
  }, defaultizedProps.viewRenderers);
  const props = _extends({}, defaultizedProps, {
    viewRenderers,
    format: resolveDateFormat(utils, defaultizedProps, false),
    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,
    slots: _extends({
      openPickerIcon: CalendarIcon,
      field: DateField
    }, defaultizedProps.slots),
    slotProps: _extends({}, defaultizedProps.slotProps, {
      field: (ownerState) => {
        var _defaultizedProps$slo;
        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
          ref
        });
      },
      toolbar: _extends({
        hidden: true
      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
    })
  });
  const {
    renderPicker
  } = useDesktopPicker({
    props,
    valueManager: singleItemValueManager,
    valueType: "date",
    getOpenDialogAriaText: localeText.openDatePickerDialogue,
    validator: validateDate
  });
  return renderPicker();
});
DesktopDatePicker.propTypes = {
  autoFocus: import_prop_types.default.bool,
  className: import_prop_types.default.string,
  closeOnSelect: import_prop_types.default.bool,
  components: import_prop_types.default.object,
  componentsProps: import_prop_types.default.object,
  dayOfWeekFormatter: import_prop_types.default.func,
  defaultCalendarMonth: import_prop_types.default.any,
  defaultValue: import_prop_types.default.any,
  disabled: import_prop_types.default.bool,
  disableFuture: import_prop_types.default.bool,
  disableHighlightToday: import_prop_types.default.bool,
  disableOpenPicker: import_prop_types.default.bool,
  disablePast: import_prop_types.default.bool,
  displayWeekNumber: import_prop_types.default.bool,
  fixedWeekNumber: import_prop_types.default.number,
  format: import_prop_types.default.string,
  formatDensity: import_prop_types.default.oneOf(["dense", "spacious"]),
  inputRef: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.object
  })]),
  label: import_prop_types.default.node,
  loading: import_prop_types.default.bool,
  localeText: import_prop_types.default.object,
  maxDate: import_prop_types.default.any,
  minDate: import_prop_types.default.any,
  monthsPerRow: import_prop_types.default.oneOf([3, 4]),
  onAccept: import_prop_types.default.func,
  onChange: import_prop_types.default.func,
  onClose: import_prop_types.default.func,
  onError: import_prop_types.default.func,
  onMonthChange: import_prop_types.default.func,
  onOpen: import_prop_types.default.func,
  onSelectedSectionsChange: import_prop_types.default.func,
  onViewChange: import_prop_types.default.func,
  onYearChange: import_prop_types.default.func,
  open: import_prop_types.default.bool,
  openTo: import_prop_types.default.oneOf(["day", "month", "year"]),
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types.default.bool,
  reduceAnimations: import_prop_types.default.bool,
  renderLoading: import_prop_types.default.func,
  selectedSections: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types.default.number, import_prop_types.default.shape({
    endIndex: import_prop_types.default.number.isRequired,
    startIndex: import_prop_types.default.number.isRequired
  })]),
  shouldDisableDate: import_prop_types.default.func,
  shouldDisableMonth: import_prop_types.default.func,
  shouldDisableYear: import_prop_types.default.func,
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  slotProps: import_prop_types.default.object,
  slots: import_prop_types.default.object,
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  timezone: import_prop_types.default.string,
  value: import_prop_types.default.any,
  view: import_prop_types.default.oneOf(["day", "month", "year"]),
  viewRenderers: import_prop_types.default.shape({
    day: import_prop_types.default.func,
    month: import_prop_types.default.func,
    year: import_prop_types.default.func
  }),
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["day", "month", "year"]).isRequired),
  yearsPerRow: import_prop_types.default.oneOf([3, 4])
};

// node_modules/@mui/x-date-pickers/DatePicker/DatePicker.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _excluded4 = ["desktopModeMediaQuery"];
var DatePicker = React3.forwardRef(function DatePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDatePicker"
  });
  const {
    desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const isDesktop = useMediaQuery(desktopModeMediaQuery, {
    defaultMatches: true
  });
  if (isDesktop) {
    return (0, import_jsx_runtime3.jsx)(DesktopDatePicker, _extends({
      ref
    }, other));
  }
  return (0, import_jsx_runtime3.jsx)(MobileDatePicker, _extends({
    ref
  }, other));
});
true ? DatePicker.propTypes = {
  autoFocus: import_prop_types2.default.bool,
  className: import_prop_types2.default.string,
  closeOnSelect: import_prop_types2.default.bool,
  components: import_prop_types2.default.object,
  componentsProps: import_prop_types2.default.object,
  dayOfWeekFormatter: import_prop_types2.default.func,
  defaultCalendarMonth: import_prop_types2.default.any,
  defaultValue: import_prop_types2.default.any,
  desktopModeMediaQuery: import_prop_types2.default.string,
  disabled: import_prop_types2.default.bool,
  disableFuture: import_prop_types2.default.bool,
  disableHighlightToday: import_prop_types2.default.bool,
  disableOpenPicker: import_prop_types2.default.bool,
  disablePast: import_prop_types2.default.bool,
  displayWeekNumber: import_prop_types2.default.bool,
  fixedWeekNumber: import_prop_types2.default.number,
  format: import_prop_types2.default.string,
  formatDensity: import_prop_types2.default.oneOf(["dense", "spacious"]),
  inputRef: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.shape({
    current: import_prop_types2.default.object
  })]),
  label: import_prop_types2.default.node,
  loading: import_prop_types2.default.bool,
  localeText: import_prop_types2.default.object,
  maxDate: import_prop_types2.default.any,
  minDate: import_prop_types2.default.any,
  monthsPerRow: import_prop_types2.default.oneOf([3, 4]),
  onAccept: import_prop_types2.default.func,
  onChange: import_prop_types2.default.func,
  onClose: import_prop_types2.default.func,
  onError: import_prop_types2.default.func,
  onMonthChange: import_prop_types2.default.func,
  onOpen: import_prop_types2.default.func,
  onSelectedSectionsChange: import_prop_types2.default.func,
  onViewChange: import_prop_types2.default.func,
  onYearChange: import_prop_types2.default.func,
  open: import_prop_types2.default.bool,
  openTo: import_prop_types2.default.oneOf(["day", "month", "year"]),
  orientation: import_prop_types2.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types2.default.bool,
  reduceAnimations: import_prop_types2.default.bool,
  renderLoading: import_prop_types2.default.func,
  selectedSections: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["all", "day", "hours", "meridiem", "minutes", "month", "seconds", "weekDay", "year"]), import_prop_types2.default.number, import_prop_types2.default.shape({
    endIndex: import_prop_types2.default.number.isRequired,
    startIndex: import_prop_types2.default.number.isRequired
  })]),
  shouldDisableDate: import_prop_types2.default.func,
  shouldDisableMonth: import_prop_types2.default.func,
  shouldDisableYear: import_prop_types2.default.func,
  showDaysOutsideCurrentMonth: import_prop_types2.default.bool,
  slotProps: import_prop_types2.default.object,
  slots: import_prop_types2.default.object,
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  timezone: import_prop_types2.default.string,
  value: import_prop_types2.default.any,
  view: import_prop_types2.default.oneOf(["day", "month", "year"]),
  viewRenderers: import_prop_types2.default.shape({
    day: import_prop_types2.default.func,
    month: import_prop_types2.default.func,
    year: import_prop_types2.default.func
  }),
  views: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOf(["day", "month", "year"]).isRequired),
  yearsPerRow: import_prop_types2.default.oneOf([3, 4])
} : void 0;
export {
  DatePicker,
  DatePickerToolbar,
  datePickerToolbarClasses
};
//# sourceMappingURL=@mui_x-date-pickers_DatePicker.js.map
